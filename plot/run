#!/usr/bin/ruby

# This is the main entry point for running SHRDLURN.  See
# fig/lib/execrunner.rb for more documentation for how commands are generated.
# There are a bunch of modes that this script can be invoked with, which
# loosely correspond to the modules.

$: << 'fig/lib'
require 'execrunner'
$path = 'plot'
$output = 'plot/output'
$modes = []
def addMode(name, description, func)
  $modes << [name, description, func]
end

def codalab(dependencies=nil)
  # Set @cl=1 to run job on CodaLab
  dependencies ||= l(':fig', ':lib', ':module-classes.txt', ':libsempre')
  l(
    letDefault(:cl, 0),
    sel(:cl,
      l(),
      l('cl', 'run', dependencies, '---', 'LC_ALL=C.UTF-8'),
    nil),
  nil)
end

def header(modules='core', codalabDependencies=nil)
  l(
    codalab(codalabDependencies),
    # Queuing system
    letDefault(:q, 0), sel(:q, l(), l('fig/bin/q', '-shareWorkingPath', o('mem', '5g'), o('memGrace', 10), '-add', '---')),
    # Create execution directory
    letDefault(:pooldir, 1),
    sel(:pooldir, l(), 'fig/bin/qcreate'),
    # Run the Java command...
    'java',
    '-ea',
    '-Dmodules='+modules,
    # Memory size
    letDefault(:memsize, 'default'),
    sel(:memsize, {
      'tiny' => l('-Xms2G', '-Xmx4G'),
      'low' => l('-Xms5G', '-Xmx7G'),
      'default' => l('-Xms8G', '-Xmx10G'),
      'medium' => l('-Xms12G', '-Xmx14G'),
      'high' => l('-Xms20G', '-Xmx24G'),
      'higher' => l('-Xms40G', '-Xmx50G'),
      'impressive' => l('-Xms75G', '-Xmx90G'),
    }),
    # Classpath
    '-cp', 'libsempre/*:lib/*',
    # Profiling
    letDefault(:prof, 0), sel(:prof, l(), '-Xrunhprof:cpu=samples,depth=100,file=_OUTPATH_/java.hprof.txt'),
    # Debugging
    letDefault(:debug, 0), sel(:debug, l(), l('-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,suspend=y,address=8898')),
  nil)
end

def figOpts; l(selo(:pooldir, 'execDir', 'exec', '_OUTPATH_'), o('overwriteExecDir'), o('addToView', 0)) end

addMode('test', 'Run unit tests for interactive stuff', lambda { |e|
  l(
    'java', '-ea', '-Xmx12g', '-cp', 'libsempre/*:lib/*',
    letDefault(:debug, 0), sel(:debug, l(), l('-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,suspend=y,address=8898')),
    'org.testng.TestNG',
    lambda { |e|
      if e[:class]
        l('-testclass', 'edu.stanford.nlp.sempre.interactive.test.' + e[:class])
      else
        "./#{$path}/testng.xml"
      end
    },
  nil)
})

addMode('setup', 'run some setup scripts for plotting', lambda { |e| l(
  lambda { |e| system 'cd plot && python vega_lite_paths.py -is_typed --filter "items vconcat hconcat layer spec repeat encode selection"'},
  lambda { |e| system 'cd plot && svn checkout https://github.com/vega/vega-lite/trunk/examples/specs'},
  lambda { |e| system 'cd plot && bash makedir.sh'},
nil) })
############################################################
# {2016-07-02} [sidaw]: interactive semantic parsing
addMode('plot', 'interactive semantic parsing for plotting', lambda { |e| l(
  #rlwrap,
  header('core,interactive'),
  'edu.stanford.nlp.sempre.Main',
  #figOpts,
  o('server'),
  o('masterType', 'edu.stanford.nlp.sempre.interactive.JsonMaster'),
  o('Executor', 'interactive.VegaExecutor'),
  o('LanguageAnalyzer', 'interactive.DALAnalyzer'),
  selo(0, 'Grammar.inPaths', "./#{$path}/plot.grammar"),

  o('Params.initWeightsRandomly', false),
  o('Grammar.binarizeRules', false),
  o('Grammar.useApplyFn', 'interactive.ApplyFn'),

  o('LanguageAnalyzer.lowerCaseTokens', false),

  o('Parser.pruneErrorValues', true),
  o('Parser', 'FloatingParser'),
  o('FloatingParser.defaultIsFloating', false),
  o('FloatingParser.useAnchorsOnce', true),
  o('FloatingParser.allowCanonicalUtteranceOverride', true),
  o('Parser.callSetEvaluation', false),
  o('Parser.coarsePrune', false),
  o('ParserState.mapToFormula', true),
  o('Parser.beamSize', 200),
  o('ParserState.customExpectedCounts', 'None'),

  o('Params.l1Reg', 'nonlazy'),
  o('Params.l1RegCoeff', 0.0001),

  o('Params.initStepSize', 0.1),
  o('Params.adaptiveStepSize', true),
  #o('Params.stepSizeReduction', 0.25),  # o('FeatureExtractor.featureDomains', ':rule'),

  o('JsonMaster.intOutputPath', './plot-out/'),
  o('InteractiveServer.numThreads', 8),
  o('InteractiveServer.maxCandidates', 100),
  o('InteractiveServer.queryLogPath', './plot-out/query.log'),
  o('InteractiveServer.responseLogPath', './plot-out/response.log'),
  o('InteractiveServer.port', 8405),

  o('Derivation.showTypes', false),
  o('Derivation.showValues', false),
  o('Derivation.showRules', false),
  o('Derivation.anchoredBonus', 1.0),

  o('VegaResources.vegaSchema', "./#{$path}/vega-lite-v2.json"),
  o('VegaResources.vegaSpecifications', "./#{$path}/templates/population", "./#{$path}/templates/car", "./#{$path}/templates/stocks"),
  selo(0, 'VegaResources.allVegaJsonPaths', "./#{$path}/vega-lite-paths.txt", "./plot-out/PathInTemplates.txt"),

  o('VegaEngine.verbose', 1),
  o('VegaExecutor.compileVega', true),
  o('JsonFn.maxJoins', 200),

  # learning stuff
  o('Dataset.inPaths', "train:./#{$path}/sampledata.jsonl"),
  o('Parser.callSetEvaluation', true),

  o('FeatureExtractor.featureComputers', 'FloatingFeatureComputer', 'interactive.VegaFeatureComputer'),
  o('FeatureExtractor.featureDomains', 'rule', 'span', 'bigram', 'floatSkip', 'floatRule'),

  o('Learner.maxTrainIters', 2),

  lambda { |e| system 'mkdir -p ./plot-out/'; nil},
  lambda { |e| system 'mkdir -p ./plot-out/log/'; nil},
nil) })
############################################################

if ARGV.size == 0
  puts "#{$0} @mode=<mode> [options]"
  puts
  puts 'This is the main entry point for all interactive related modes.'
  puts "Modes:"
  $modes.each { |name,description,func|
    puts "  #{name}: #{description}"
  }
end

modesMap = {}
$modes.each { |name,description,func|
  modesMap[name] = func
}
run!(sel(:mode, modesMap))
